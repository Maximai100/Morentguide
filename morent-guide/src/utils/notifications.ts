// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

export interface NotificationData {
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  tag?: string;
  data?: any;
  actions?: Array<{
    action: string;
    title: string;
    icon?: string;
  }>;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const isNotificationSupported = (): boolean => {
  return 'Notification' in window && 'serviceWorker' in navigator;
};

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const requestNotificationPermission = async (): Promise<boolean> => {
  if (!isNotificationSupported()) {
    console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
    return false;
  }

  if (Notification.permission === 'granted') {
    return true;
  }

  if (Notification.permission === 'denied') {
    console.warn('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    return false;
  }

  try {
    const permission = await Notification.requestPermission();
    return permission === 'granted';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
    return false;
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const registerServiceWorker = async (): Promise<ServiceWorkerRegistration | null> => {
  if (!('serviceWorker' in navigator)) {
    console.warn('Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    return null;
  }

  try {
    const registration = await navigator.serviceWorker.register('/sw.js');
    console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
    return registration;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
    return null;
  }
};

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const subscribeToPushNotifications = async (): Promise<PushSubscription | null> => {
  const registration = await registerServiceWorker();
  if (!registration) return null;

  const permission = await requestNotificationPermission();
  if (!permission) return null;

  try {
    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(import.meta.env.VITE_VAPID_PUBLIC_KEY || '')
    });

    console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞:', subscription);
    return subscription;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return null;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const sendLocalNotification = async (data: NotificationData): Promise<void> => {
  if (!isNotificationSupported()) return;

  const permission = await requestNotificationPermission();
  if (!permission) return;

  const registration = await navigator.serviceWorker.ready;
  
  await registration.showNotification(data.title, {
    body: data.body,
    icon: data.icon || '/icons/icon-192x192.png',
    badge: data.badge || '/icons/icon-72x72.png',
    tag: data.tag,
    data: data.data,
    // actions: data.actions, // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    // vibrate: [100, 50, 100], // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    requireInteraction: false,
    silent: false
  });
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏
export const sendCheckinReminder = async (guestName: string, checkinDate: string, apartmentTitle: string): Promise<void> => {
  const checkinDateObj = new Date(checkinDate);
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  let title = '';
  let body = '';

  if (checkinDateObj.toDateString() === today.toDateString()) {
    title = 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';
    body = `–°–µ–≥–æ–¥–Ω—è –≤–∞—à –∑–∞–µ–∑–¥ –≤ ${apartmentTitle}. –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!`;
  } else if (checkinDateObj.toDateString() === tomorrow.toDateString()) {
    title = 'üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–µ–∑–¥–µ';
    body = `–ó–∞–≤—Ç—Ä–∞, ${guestName}, –≤–∞—à –∑–∞–µ–∑–¥ –≤ ${apartmentTitle}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–µ–∑–¥—É!`;
  } else {
    return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞—Ç
  }

  await sendLocalNotification({
    title,
    body,
    tag: `checkin-${guestName}`,
    data: {
      type: 'checkin',
      guestName,
      checkinDate,
      apartmentTitle
    },
    actions: [
      {
        action: 'view',
        title: '–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
      }
    ]
  });
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
export const sendImportantUpdate = async (title: string, message: string): Promise<void> => {
  await sendLocalNotification({
    title: `üîî ${title}`,
    body: message,
    tag: 'important-update',
    data: {
      type: 'update',
      timestamp: Date.now()
    }
  });
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞
const urlBase64ToUint8Array = (base64String: string): Uint8Array => {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const initializeNotifications = async (): Promise<void> => {
  if (!isNotificationSupported()) {
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    return;
  }

  const permission = await requestNotificationPermission();
  if (permission) {
    console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
    await registerServiceWorker();
  }
};

import type { Apartment, Booking, BookingPageData } from '../types';
import axios from 'axios';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vercel
const API_BASE_URL = '/api'; // –ü—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vercel

console.log('üöÄ API –ù–ê–°–¢–†–û–ï–ù –ù–ê –ü–†–û–ö–°–ò –ß–ï–†–ï–ó VERCEL');
console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π URL:', API_BASE_URL);

// –°–æ–∑–¥–∞–µ–º axios instance —Å –±–∞–∑–æ–≤—ã–º URL
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏
export const apartmentApi = {
  getAll: async (): Promise<Apartment[]> => {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    try {
      const response = await api.get('/items/apartments');
      console.log('‚úÖ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.data?.length || 0, '–∑–∞–ø–∏—Å–µ–π');
      return response.data.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', error);
      throw error;
    }
  },
  
  getById: async (id: string): Promise<Apartment> => {
    try {
      const response = await api.get(`/items/apartments/${id}`);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },
  
  create: async (apartment: Omit<Apartment, 'id'>): Promise<Apartment> => {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    try {
      const response = await api.post('/items/apartments', apartment);
      console.log('‚úÖ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', response.data.data);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },
  
  update: async (id: string, apartment: Partial<Apartment>): Promise<Apartment> => {
    try {
      const response = await api.patch(`/items/apartments/${id}`, apartment);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },
  
  delete: async (id: string): Promise<void> => {
    try {
      await api.delete(`/items/apartments/${id}`);
      console.log('‚úÖ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω:', id);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
export const bookingApi = {
  getAll: async (): Promise<Booking[]> => {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    try {
      const response = await api.get('/items/bookings?fields=*,apartment_id.*');
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.data?.length || 0, '–∑–∞–ø–∏—Å–µ–π');
      return response.data.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw error;
    }
  },
  
  getById: async (id: string): Promise<Booking> => {
    try {
      const response = await api.get(`/items/bookings/${id}?fields=*,apartment_id.*`);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  },
  
  getBySlug: async (slug: string): Promise<BookingPageData> => {
    try {
      const response = await api.get(`/items/bookings?filter[slug][_eq]=${slug}&fields=*,apartment_id.*`);
      const booking = response.data.data?.[0];
      if (!booking) {
        throw new Error('Booking not found');
      }
      
      const apartment = booking.apartment_id;
      if (!apartment) {
        throw new Error('Apartment not found');
      }
      
      return {
        booking,
        apartment
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ slug:', error);
      throw error;
    }
  },
  
  create: async (booking: Omit<Booking, 'id' | 'created_at'>): Promise<Booking> => {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    try {
      const response = await api.post('/items/bookings', booking);
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', response.data.data);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  },
  
  update: async (id: string, booking: Partial<Booking>): Promise<Booking> => {
    try {
      const response = await api.patch(`/items/bookings/${id}`, booking);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  },
  
  delete: async (id: string): Promise<void> => {
    try {
      await api.delete(`/items/bookings/${id}`);
      console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', id);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  },
  
  generateSlug: async (): Promise<{ slug: string }> => {
    const newSlug = `booking-${Date.now()}`;
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug:', newSlug);
    return { slug: newSlug };
  },
}; 
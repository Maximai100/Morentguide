import type { Apartment, Booking, BookingPageData } from '../types';
import { demoApartments, demoBookings } from './demo-data';

// –ü–û–õ–ù–û–°–¢–¨–Æ –ù–û–í–´–ô API –ë–ï–ó HTTP –ó–ê–ü–†–û–°–û–í
console.log('üöÄ –ù–û–í–´–ô API –ó–ê–ì–†–£–ñ–ï–ù - –ë–ï–ó HTTP –ó–ê–ü–†–û–°–û–í');
console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
export const apartmentApi = {
  getAll: async (): Promise<Apartment[]> => {
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã...');
    return demoApartments;
  },
  
  getById: async (id: string): Promise<Apartment> => {
    const apartment = demoApartments.find(apt => apt.id === id);
    if (!apartment) {
      throw new Error('Apartment not found');
    }
    return apartment;
  },
  
  create: async (apartment: Omit<Apartment, 'id'>): Promise<Apartment> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞', apartment);
    const newApartment: Apartment = {
      ...apartment,
      id: `demo-${Date.now()}`
    };
    return newApartment;
  },
  
  update: async (id: string, apartment: Partial<Apartment>): Promise<Apartment> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞', id, apartment);
    const existing = demoApartments.find(apt => apt.id === id);
    if (!existing) {
      throw new Error('Apartment not found');
    }
    return { ...existing, ...apartment };
  },
  
  delete: async (id: string): Promise<void> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞', id);
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
export const bookingApi = {
  getAll: async (): Promise<Booking[]> => {
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    return demoBookings;
  },
  
  getById: async (id: string): Promise<Booking> => {
    const booking = demoBookings.find(book => book.id === id);
    if (!booking) {
      throw new Error('Booking not found');
    }
    return booking;
  },
  
  getBySlug: async (slug: string): Promise<BookingPageData> => {
    const booking = demoBookings.find(book => book.slug === slug);
    if (!booking) {
      throw new Error('Booking not found');
    }
    
    const apartment = demoApartments.find(apt => apt.id === booking.apartment_id);
    if (!apartment) {
      throw new Error('Apartment not found');
    }
    
    return {
      booking,
      apartment
    };
  },
  
  create: async (booking: Omit<Booking, 'id' | 'created_at'>): Promise<Booking> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', booking);
    const newBooking: Booking = {
      ...booking,
      id: `demo-booking-${Date.now()}`,
      slug: `demo-booking-${Date.now()}`,
      created_at: new Date().toISOString(),
      date_created: new Date().toISOString()
    };
    return newBooking;
  },
  
  update: async (id: string, booking: Partial<Booking>): Promise<Booking> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', id, booking);
    const existing = demoBookings.find(book => book.id === id);
    if (!existing) {
      throw new Error('Booking not found');
    }
    return { ...existing, ...booking };
  },
  
  delete: async (id: string): Promise<void> => {
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', id);
  },
  
  generateSlug: async (): Promise<{ slug: string }> => {
    const newSlug = `demo-slug-${Date.now()}`;
    console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug', newSlug);
    return { slug: newSlug };
  },
}; 